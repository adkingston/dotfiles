// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

define(function(requirejs) {
    "use strict";

    var $ = requirejs('jquery');
    var utils = requirejs('base/js/utils');

    var Contents = function(options) {
        /**
         * Constructor
         *
         * Preliminary documentation for the REST API is at 
         * https://github.com/ipython/ipython/wiki/IPEP-27%3A-Contents-Service
         *
         * A contents handles passing file operations
         * to the back-end.  This includes checkpointing
         * with the normal file operations.
         *
         * Parameters:
         *  options: dictionary
         *      Dictionary of keyword arguments.
         *          base_url: string
         */
        this.base_url = options.base_url;
    };

    /** Error type */
    Contents.DIRECTORY_NOT_EMPTY_ERROR = 'DirectoryNotEmptyError';

    Contents.DirectoryNotEmptyError = function() {
        // Constructor
        //
        // An error representing the result of attempting to delete a non-empty
        // directory.
        this.message = 'A directory must be empty before being deleted.';
    };
    
    Contents.DirectoryNotEmptyError.prototype = Object.create(Error.prototype);
    Contents.DirectoryNotEmptyError.prototype.name =
        Contents.DIRECTORY_NOT_EMPTY_ERROR;


    Contents.prototype.api_url = function() {
        var url_parts = [
            this.base_url, 'api/contents',
            utils.url_join_encode.apply(null, arguments),
        ];
        return utils.url_path_join.apply(null, url_parts);
    };

    /**
     * Creates a basic error handler that wraps a jqXHR error as an Error.
     *
     * Takes a callback that accepts an Error, and returns a callback that can
     * be passed directly to $.ajax, which will wrap the error from jQuery
     * as an Error, and pass that to the original callback.
     *
     * @method create_basic_error_handler
     * @param{Function} callback
     * @return{Function}
     */
    Contents.prototype.create_basic_error_handler = function(callback) {
        if (!callback) {
            return utils.log_ajax_error;
        }
        return function(xhr, status, error) {
            callback(utils.wrap_ajax_error(xhr, status, error));
        };
    };

    /**
     * File Functions (including notebook operations)
     */

    /**
     * Get a file.
     *
     * @method get
     * @param {String} path
     * @param {Object} options
     *    type : 'notebook', 'file', or 'directory'
     *    format: 'text' or 'base64'; only relevant for type: 'file'
     *    content: true or false; // whether to include the content
     */
    Contents.prototype.get = function (path, options) {
        /**
         * We do the call with settings so we can set cache to false.
         */
        var settings = {
            processData : false,
            cache : false,
            type : "GET",
            dataType : "json",
        };
        var url = this.api_url(path);
        var params = {};
        if (options.type) { params.type = options.type; }
        if (options.format) { params.format = options.format; }
        if (options.content === false) { params.content = '0'; }
        return utils.promising_ajax(url + '?' + $.param(params), settings);
    };


    /**
     * Creates a new untitled file or directory in the specified directory path.
     *
     * @method new
     * @param {String} path: the directory in which to create the new file/directory
     * @param {Object} options:
     *      ext: file extension to use
     *      type: model type to create ('notebook', 'file', or 'directory')
     */
    Contents.prototype.new_untitled = function(path, options) {
        var data = JSON.stringify({
          ext: options.ext,
          type: options.type
        });

        var settings = {
            processData : false,
            type : "POST",
            data: data,
            contentType: 'application/json',
            dataType : "json",
        };
        return utils.promising_ajax(this.api_url(path), settings);
    };

    Contents.prototype.delete = function(path) {
        var settings = {
            processData : false,
            type : "DELETE",
            dataType : "json",
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings).catch(
            // Translate certain errors to more specific ones.
            function(error) {
                // TODO: update IPEP27 to specify errors more precisely, so
                // that error types can be detected here with certainty.
                if (error.xhr.status === 400) {
                    throw new Contents.DirectoryNotEmptyError();
                }
                throw error;
            }
        );
    };

    Contents.prototype.rename = function(path, new_path) {
        var data = {path: new_path};
        var settings = {
            processData : false,
            type : "PATCH",
            data : JSON.stringify(data),
            dataType: "json",
            contentType: 'application/json',
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.trust = function(path) {
        var settings = {
            processData : false,
            type : "POST",
            contentType: 'application/json',
        };
        var url = this.api_url(path, "trust");
        return utils.promising_ajax(url, settings);
    }

    Contents.prototype.save = function(path, model) {
        /**
         * We do the call with settings so we can set cache to false.
         */
        var settings = {
            processData : false,
            type : "PUT",
            dataType: "json",
            data : JSON.stringify(model),
            contentType: 'application/json',
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings);
    };
    
    Contents.prototype.copy = function(from_file, to_dir) {
        /**
         * Copy a file into a given directory via POST
         * The server will select the name of the copied file
         */
        var url = this.api_url(to_dir);
        
        var settings = {
            processData : false,
            type: "POST",
            data: JSON.stringify({copy_from: from_file}),
            contentType: 'application/json',
            dataType : "json",
        };
        return utils.promising_ajax(url, settings);
    };

    /**
     * Checkpointing Functions
     */

    Contents.prototype.create_checkpoint = function(path) {
        var url = this.api_url(path, 'checkpoints');
        var settings = {
            type : "POST",
            contentType: false,  // no data
            dataType : "json",
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.list_checkpoints = function(path) {
        var url = this.api_url(path, 'checkpoints');
        var settings = {
            type : "GET",
            cache: false,
            dataType: "json",
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.restore_checkpoint = function(path, checkpoint_id) {
        var url = this.api_url(path, 'checkpoints', checkpoint_id);
        var settings = {
            type : "POST",
            contentType: false,  // no data
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.delete_checkpoint = function(path, checkpoint_id) {
        var url = this.api_url(path, 'checkpoints', checkpoint_id);
        var settings = {
            type : "DELETE",
        };
        return utils.promising_ajax(url, settings);
    };

    /**
     * File management functions
     */

    /**
     * List notebooks and directories at a given path
     *
     * On success, load_callback is called with an array of dictionaries
     * representing individual files or directories.  Each dictionary has
     * the keys:
     *     type: "notebook" or "directory"
     *     created: created date
     *     last_modified: last modified dat
     * @method list_notebooks
     * @param {String} path The path to list notebooks in
     */
    Contents.prototype.list_contents = function(path) {
        return this.get(path, {type: 'directory'});
    };

    return {'Contents': Contents};
});
1Ÿ¶*Ü	      ^‰>õ^‰>õA«ªq∞Aè   J    :https://iaml.proof.localhost/static/services/contents.js?v=20200613024830 necko:classified 1 strongly-framed 1 security-info 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 request-method GET response-head HTTP/2 200 OK
accept-ranges: bytes
cache-control: max-age=315360000
content-security-policy: frame-ancestors 'self'; report-uri /api/security/csp-report
content-type: application/javascript
date: Sat, 13 Jun 2020 02:48:47 GMT
expires: Tue, 11 Jun 2030 02:48:47 GMT
last-modified: Wed, 22 Jan 2020 13:01:22 GMT
server: TornadoServer/6.0.3
x-content-type-options: nosniff
content-length: 8434
X-Firefox-Spdy: h2
 original-response-headers accept-ranges: bytes
cache-control: max-age=315360000
content-security-policy: frame-ancestors 'self'; report-uri /api/security/csp-report
content-type: application/javascript
date: Sat, 13 Jun 2020 02:48:47 GMT
expires: Tue, 11 Jun 2030 02:48:47 GMT
last-modified: Wed, 22 Jan 2020 13:01:22 GMT
server: TornadoServer/6.0.3
x-content-type-options: nosniff
content-length: 8434
X-Firefox-Spdy: h2
 ctid 2 uncompressed-len 0 net-response-time-onstart 1 net-response-time-onstop 2    Ú